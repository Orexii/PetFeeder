#ifndef PETFEEDER_h
#define PETFEEDER_h

//Config file can have up to 256 chars
#define CONFIG_FILE_SIZE 256
//Pins used for load cells
#define FOOD_DOUT  3
#define FOOD_CLK  2
#define WATER_DOUT  9
#define WATER_CLK  8
//Pins used for proximity sensor
#define TRIGGER_PIN 7
#define ECHO_PIN 4
#define MAX_DISTANCE 200
//Largest standard deviation allowd for scale readings
#define LARGEST_SD_VALUE 0.006
//Minimum distance in centimeters needed for scanning for RFID tag
//Distance is (xin)*(2.54cm/1in)
#define MIN_DIST_TO_SCAN 3*2.54
//Food motor revolutions per second
#define REV_PER_SEC 0.5
//Ounces dispensed per revolution of paddle
#define OZ_PER_REV 8
//Pump flow rate
#define MIN_PER_ML 0.01
//Food motor pin
#define FOOD_MOTOR_PIN A0
//Water motor pin
#define WATER_MOTOR_PIN A1
//Water level pin
#define WATER_LEVEL_PIN A2
//Food reservoir reset pin
#define FOOD_RESEVOIR_PIN A5
//Bowl volume = (1/4)*(r)*(r)*(pi)*(h)
#define BOWL_VOLUME (1/4)*(6*2.54)*(6*2.54)*(3.14)*(4*2.54)
//Water portions dispensed per cycle
#define WATER_PORTION 10
//Food resevoir maximum weight in oz = xlbs*(16 oz/lb)
#define FOOD_RESEVOIR_MAX_WEIGHT 10*16
//Ounces per killogram
#define OZ_PER_KG 35.274
//New configuration file size
#define NEW_CONFIG_SIZE 100

//Servo motor library
#include <Servo.h>
//SD Card libraries
#include <SPI.h>
#include "SdFat.h"
//Load cell library
#include <HX711.h>
//Proximity sensor library
#include <NewPing.h>
//RFID library
#include "rdm630.h"
//General Libreries
#include <math.h>
#include <TimeLib.h>
#include <MemoryFree.h>


class PetFeeder
{
  public:
    PetFeeder();

    virtual ~PetFeeder();

    ///////////////////////////////////////////////////////////////////////////////
    /// parseConfig
    ///////////////////////////////////////////////////////////////////////////////
    int parseConfig(void);

    ///////////////////////////////////////////////////////////////////////////////
    /// dispenseFoodScheduled
    ///////////////////////////////////////////////////////////////////////////////
    int dispenseFoodScheduled(void);

    ///////////////////////////////////////////////////////////////////////////////
    /// getWaterLevel
    ///////////////////////////////////////////////////////////////////////////////
    int getWaterLevel(void);

    ///////////////////////////////////////////////////////////////////////////////
    /// setFeederTime
    ///////////////////////////////////////////////////////////////////////////////
    int setFeederTime(void);
	
    ///////////////////////////////////////////////////////////////////////////////
    /// updateSchedule
    ///////////////////////////////////////////////////////////////////////////////
    int updateSchedule(void);
	
    ///////////////////////////////////////////////////////////////////////////////
    /// verifyPet
    ///////////////////////////////////////////////////////////////////////////////
    int verifyPet(void);
    
    ///////////////////////////////////////////////////////////////////////////////
    /// dispenseWater
    ///////////////////////////////////////////////////////////////////////////////
    int dispenseWater(void);

    ///////////////////////////////////////////////////////////////////////////////
    /// updateFoodReservoir
    ///////////////////////////////////////////////////////////////////////////////
    int updateFoodReservoir(void);

    ///////////////////////////////////////////////////////////////////////////////
    /// monitorSerial
    ///////////////////////////////////////////////////////////////////////////////
    int monitorSerial(void);

    ///////////////////////////////////////////////////////////////////////////////
    /// monitorFoodReset
    ///////////////////////////////////////////////////////////////////////////////
    int monitorFoodReset(void);

  private:
    ///////////////////////////////////////////////////////////////////////////////
    /// calculateSD
    ///////////////////////////////////////////////////////////////////////////////
    double calculateSD(double data[]);

    ///////////////////////////////////////////////////////////////////////////////
    /// calculateMean
    ///////////////////////////////////////////////////////////////////////////////
    double calculateMean(double data[]);

    ///////////////////////////////////////////////////////////////////////////////
    /// closeEnough
    ///////////////////////////////////////////////////////////////////////////////
    int closeEnough(void);

    ///////////////////////////////////////////////////////////////////////////////
    /// openDoor
    ///////////////////////////////////////////////////////////////////////////////
    int openDoor(void);

    ///////////////////////////////////////////////////////////////////////////////
    /// weighAndStoreFood
    ///////////////////////////////////////////////////////////////////////////////
    int weighAndStoreFood(void);

    ///////////////////////////////////////////////////////////////////////////////
    /// dispenseFood
    ///////////////////////////////////////////////////////////////////////////////
    int dispenseFood(void);

    ///////////////////////////////////////////////////////////////////////////////
    /// parseNewConfig
    ///////////////////////////////////////////////////////////////////////////////
    int parseNewConfig(void);

    int feedingFrequency;
    int feedingHour1;
    int feedingMinute1;
    int feedingHour2;
    int feedingMinute2;
    int feedingHour3;
    int feedingMinute3;
    int feedingAmount;
    int configNumber;
    int configNumberOld;
    int currentDay;
    int waterLevel;
    int foodReservoirLevel;
    unsigned long systemTime;
    unsigned long tagID;
    bool feedingOverride;
    bool takePhoto;
    bool fedOnce;
    bool fedTwice;
    bool fedThrice;
    bool petVerified;

    const char* foodWeightFilePath = "foodWeights.txt";

    HX711 *foodScale;
    HX711 *waterScale;

    NewPing *DistanceSensor;
    unsigned int objectDistance;

    // SD chip select pin
    const uint8_t chipSelect = SS;
    SdFat *sd;
    File feedingPatternsFile;

    rdm630 *rfid;

    Servo *servo;
    int servoPos;

    char newConfig[100];
};

#endif /* PETFEEDER_h */

